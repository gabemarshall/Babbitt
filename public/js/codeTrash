codeTrash

/*
temp store for old code
*/

//PUBNUB SUBSCRIBINE CODE
//******************************************************************************
//Warning of opponent firing lasers
if (message.incoming_laser) {
    if (message.playerName != myShip.playerName) {
        term.echo(message.playerName + " is preparing to fire laser.");
    }
}

//Apply opponent lasers
else if (message.laser) {
    if (message.playerName != myShip.playerName) {
        var laserDamage = adjustLaserValue(message.laser);
        adjustShipHP(laserDamage);
        if (laserDamage > 0){
            term.echo("Damage taken. Hull down to "+myShip.hull.damage.current+" percent.")
            shakeScreen()
        } 
        else {
            term.echo("No damage taken.")
        }
    }
}

//Send message to opponent on whether his laser attack was successful or not
else if (message.title === 'DAMAGE' && message.playerName != myShip.playerName) {
    laserActive = false //disengage laser to allow them to fire again
    
    //unsuccessful
    if (!message.successful) {
        var laser = ig.game.getEntitiesByType(EntityLaser)[0];
        laser.kill()
        ig.game.spawnEntity(EntityeShields, 0, 0);
        ig.game.spawnEntity(EntityLaserHit, 0, 0);
    }
    //successful
    else {
        term.echo("Laser appeared to do damage blah blah blah");
        var laser = ig.game.getEntitiesByType(EntityLaser)[0];
        laser.kill();
        ig.game.spawnEntity(EntityLaserHit, 0, 0);
    }
}

//globals
//******************************************************************************
var enemyShip;
var termInit = false;
var gameBegun = false;
var shipHPBound = {lowerBound:0, upperBound:100};
var powerLevel = 100;
var laserActive = false;
var laserBound = {lowerBound:0, upperBound:100};
var shieldsActive = false;
var shieldLevel = 100;
var shieldBound = {lowerBound:0, upperBound:100};


var checkPowerAvailability = function(powerRequest, module) {
    if ((powerLevel - powerRequest) <= 0) {
        return false;
    }
    else {
        if(module === "shields") {
            shieldLevel = powerRequest;
        }
        else {
            powerLevel -= powerRequest;
        }
        return true;
    }
}

var destroyEnemyShip = function() {
    var ship = ig.game.getEntitiesByType(EntityShip)[0];
    ship.kill()
}

var shakeScreen = function() {
    $('.wrapper').jrumble({
        x: 2,
        y: 2,
        rotation: 1
    });
    $('.wrapper').trigger('startRumble');
    setTimeout(function(){
    	$('.wrapper').trigger('stopRumble');
    }, 200)
}

var adjustLaserValue = function(laserValue) {
    laserValue = laserValue - shieldLevel;
    if (laserValue < 0) {
        laserValue = 0;
    }
    else if (laserValue > 100) {
        laserValue = 100;
    }
    return laserValue;
}

var adjustShipHP = function(laserValue) {
    myShip.hull.damage.current = myShip.hull.damage.current - laserValue;
    if (myShip.hull.damage.current < 0) {
        myShip.hull.damage.current = 0;
    }
    else if (myShip.hull.damage.current > 100) {
        myShip.hull.damage.current = 100;
    }
    return myShip.hull.damage.current;
}

var sendMessage = function(msg) {
    pubnub.publish({
        channel: 'babb'+gameID,
        message: msg,
    })
}

//terminal input
//******************************************************************************
//Laser command
if (command.indexOf('laser') >= 0 || command.indexOf('laser_fire') >= 0) {
    var laserValue = command.replace(/(laser)/g, "")
    //Input error
    if (!laserValue) {
        term.echo('Error: You must enter a value after the Laser command');
    }
    //Shields active
    if (shieldsActive) {
        term.echo("Error: Cannot engage lasers while Shields are raised");
    }
    //Laser already active
    else if (laserActive) {
        term.echo("Error: Laser system currently engaged");
    }
    //Power unavailable
    else if (!checkPowerAvailability(laserValue, "laser")) {
        term.echo("Error: Not enough power");
    }
    //Power available
    else {
        term.echo("Firing Lasers")
        laserActive = true;
        //Send oppoent warning of lasers being fired
        sendMessage({
            "incoming_laser": true,
            "playerName": myShip.playerName
        })
        setTimeout(function() {
            sendMessage({
                "laser": laserValue,
                "playerName": myShip.playerName
            })
        }, 4500)
        ig.game.spawnEntity(EntityLaser, 0, 0);
    }
}

//Shields command
else if (command.indexOf("shields") >= 0) {
    var shieldsPowerValue = command.replace(/(shields)/g, "");
    //Input error
    if (!shieldsPowerValue) {
        term.echo("Error: You must enter a value after the Shields command");
    }
    //Lower shields
    else if (shieldsPowerValue == 0) {
        term.echo("Lowering shields to: " + shieldsPowerValue);
        shieldsActive = false;
    }
    //Raise shields
    else if (checkPowerAvailability(shieldsPowerValue, "shields") && shieldsPowerValue != 0) {
        term.echo("Raising shields to: " + shieldsPowerValue);
        ig.game.spawnEntity(EntityShields, 0, 0);
        shieldsActive = true;
    }
    else {
        term.echo("ERROR: Not enough power");
    }
}

//game_loop.js
//******************************************************************************
var shipSystemsLoop = setInterval(function() {

    // Check for shields being active
    if (!shieldsActive) {
        shieldLevel = 0
        try {
            var shield = ig.game.getEntitiesByType(EntityShields)[0];
            shield.kill()
        } 
        catch (err) {
        }
    } else {

        // If power level is too lwo, set it to 0 and drop any shields
        if (powerLevel - (shieldLevel / 10) < 0) {
            shieldsActive = false
            var shield = ig.game.getEntitiesByType(EntityShields)[0];
            shield.kill()
            powerLevel = 0
        } else {
            powerLevel -= (shieldLevel / 10)
        }
    }

    // Determine power recharge rate
    if (powerLevel <= 100) {
        if (powerLevel + 1 >= 100) {
            powerLevel = 100;
        } 
        else if (powerLevel < 0) {
            powerLevel = 0;
        } 
        else {
            powerLevel += 1;
        }
    }
}, 100)